---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "server.fullname" . }}
  labels:
    app: {{ template "server.name" . }}
    chart: {{ template "server.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ template "server.name" . }}
      release: {{ .Release.Name }}
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ template "server.name" . }}
        release: {{ .Release.Name }}
        dns-policy: enabled
    spec:
      securityContext:
        runAsUser: {{ .Values.eoloServer.user }}
      restartPolicy: Always
      containers:
      - name: {{ include "server.fullname" . }}
        image: "{{ .Values.serverImage }}:{{ .Values.serverTag }}"
        command: ["bash"]
        args:
        - "-c"
        - "./wait-for-it.sh {{ include "mysql.fullname" . }}:{{ .Values.mysql.port }} -t 500 -- ./wait-for-it.sh {{ include "rabbitmq.fullname" . }}:{{ .Values.rabbitmq.port1 }} -t 500 -- node src/server.js"
        env:
        - name: MYSQL_HOST
          value: {{ include "mysql.fullname" . }}
        - name: MYSQL_DB
          valueFrom:
            configMapKeyRef:
              name: {{ include "mysql.fullname" . }}-env-config-map
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          value: {{ .Values.mysql.mysqlRootUser }}
        - name: MYSQL_PASS
          valueFrom:
            configMapKeyRef:
              name: {{ include "mysql.fullname" . }}-env-config-map
              key: MYSQL_ROOT_PASSWORD
        - name: RABBITMQ_URL
          value: amqp://{{ .Values.rabbitmq.rabbitmqDefaultUser }}:{{ .Values.rabbitmq.rabbitmqDefaultPass }}@{{ include "rabbitmq.fullname" . }}
        ports:
        - containerPort: {{ .Values.eoloServer.port }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "server.fullname" . }}
  labels:
    app: {{ template "server.name" . }}
    chart: {{ template "server.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  ports:
  - port: {{ .Values.eoloServer.port }}
    targetPort: {{ .Values.eoloServer.port }}
    protocol: TCP
    name: {{ include "server.fullname" . }}-port
  selector:
    app: {{ template "server.name" . }}
    release: {{ .Release.Name }}
  type: {{ .Values.serviceType }}
---
{{- if .Values.networkPoliciesEnabled }}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ include "server.fullname" . }}-to-{{ include "mysql.fullname" . }}-{{ include "rabbitmq.fullname" . }}
spec:
  podSelector:
    matchLabels:
      app: {{ include "server.name" . }}
      release: {{ .Release.Name }}
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: {{ include "mysql.name" . }}
          release: {{ .Release.Name }}
    ports:
    - port: {{ .Values.mysql.port }}
      protocol: TCP
  - to:
    - podSelector:
        matchLabels:
          app: {{ include "rabbitmq.name" . }}
          release: {{ .Release.Name }}
    ports:
    - port: {{ .Values.rabbitmq.port1 }}
      protocol: TCP
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ include "server.fullname" . }}-from-ingress
spec:
  podSelector:
    matchLabels:
      app: {{ include "server.name" . }}
      release: {{ .Release.Name }}
{{- if .Values.ingressEnabled }}
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            kubernetes.io/metadata.name: ingress-nginx
        podSelector:
          matchLabels:
            app.kubernetes.io/name: ingress-nginx
      ports:
      - protocol: TCP
        port: {{ .Values.eoloServer.port }}
{{ else }}
  ingress: []
{{- end }}
{{- end }}